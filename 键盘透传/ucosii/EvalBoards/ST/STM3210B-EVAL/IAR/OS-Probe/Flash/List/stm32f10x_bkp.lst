###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       04/Jun/2018  23:13:30
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\CPU\ST\STM32\src\stm32f10x_bkp.c
#    Command line =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\CPU\ST\STM32\src\stm32f10x_bkp.c
#        -lCN
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=ARM7TDMI -e --fpu=None --dlib_config "C:\Program
#        Files\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        --cpu_mode thumb -Om --use_c++_inline
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\stm32f10x_bkp.lst
#    Object file  =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\stm32f10x_bkp.o
#
###############################################################################

C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\CPU\ST\STM32\src\stm32f10x_bkp.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_bkp.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0
      5          * Date               : 05/23/2008
      6          * Description        : This file provides all the BKP firmware functions.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED 
     15          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "stm32f10x_bkp.h"
     20          #include "stm32f10x_rcc.h"
     21          
     22          /* Private typedef -----------------------------------------------------------*/
     23          /* Private define ------------------------------------------------------------*/
     24          /* ------------ BKP registers bit address in the alias region ----------- */
     25          #define BKP_OFFSET        (BKP_BASE - PERIPH_BASE)
     26          
     27          /* --- CR Register ---*/
     28          /* Alias word address of TPAL bit */
     29          #define CR_OFFSET         (BKP_OFFSET + 0x30)
     30          #define TPAL_BitNumber    0x01
     31          #define CR_TPAL_BB        (PERIPH_BB_BASE + (CR_OFFSET * 32) + (TPAL_BitNumber * 4))
     32          
     33          /* Alias word address of TPE bit */
     34          #define TPE_BitNumber     0x00
     35          #define CR_TPE_BB         (PERIPH_BB_BASE + (CR_OFFSET * 32) + (TPE_BitNumber * 4))
     36          
     37          /* --- CSR Register ---*/
     38          /* Alias word address of TPIE bit */
     39          #define CSR_OFFSET        (BKP_OFFSET + 0x34)
     40          #define TPIE_BitNumber    0x02
     41          #define CSR_TPIE_BB       (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TPIE_BitNumber * 4))
     42          
     43          /* Alias word address of TIF bit */
     44          #define TIF_BitNumber     0x09
     45          #define CSR_TIF_BB        (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TIF_BitNumber * 4))
     46          
     47          /* Alias word address of TEF bit */
     48          #define TEF_BitNumber     0x08
     49          #define CSR_TEF_BB        (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TEF_BitNumber * 4))
     50          
     51          
     52          /* ---------------------- BKP registers bit mask ------------------------ */
     53          /* RTCCR register bit mask */
     54          #define RTCCR_CAL_Mask    ((u16)0xFF80)
     55          #define RTCCR_Mask        ((u16)0xFC7F)
     56          
     57          /* CSR register bit mask */
     58          #define CSR_CTE_Set       ((u16)0x0001)
     59          #define CSR_CTI_Set       ((u16)0x0002)
     60          
     61          /* Private macro -------------------------------------------------------------*/
     62          /* Private variables ---------------------------------------------------------*/
     63          /* Private function prototypes -----------------------------------------------*/
     64          /* Private functions ---------------------------------------------------------*/
     65          
     66          /*******************************************************************************
     67          * Function Name  : BKP_DeInit
     68          * Description    : Deinitializes the BKP peripheral registers to their default
     69          *                  reset values.
     70          * Input          : None
     71          * Output         : None
     72          * Return         : None
     73          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     74          void BKP_DeInit(void)
     75          {
   \                     BKP_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     76            RCC_BackupResetCmd(ENABLE);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       RCC_BackupResetCmd
     77            RCC_BackupResetCmd(DISABLE);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       RCC_BackupResetCmd
     78          }
   \   0000000E   0xBC09             POP      {R0,R3}
   \   00000010   0x4718             BX       R3               ;; return
     79          
     80          /*******************************************************************************
     81          * Function Name  : BKP_TamperPinLevelConfig
     82          * Description    : Configures the Tamper Pin active level.
     83          * Input          : - BKP_TamperPinLevel: specifies the Tamper Pin active level.
     84          *                    This parameter can be one of the following values:
     85          *                       - BKP_TamperPinLevel_High: Tamper pin active on high level
     86          *                       - BKP_TamperPinLevel_Low: Tamper pin active on low level
     87          * Output         : None
     88          * Return         : None
     89          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     90          void BKP_TamperPinLevelConfig(u16 BKP_TamperPinLevel)
     91          {
     92            /* Check the parameters */
     93            assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
     94          
     95            *(vu32 *) CR_TPAL_BB = BKP_TamperPinLevel;
   \                     BKP_TamperPinLevelConfig: (+1)
   \   00000000   0x....             LDR      R1,??DataTable10  ;; 0x420d8604
   \   00000002   0x6008             STR      R0,[R1, #+0]
     96          }
   \   00000004   0x4770             BX       LR               ;; return
     97          
     98          /*******************************************************************************
     99          * Function Name  : BKP_TamperPinCmd
    100          * Description    : Enables or disables the Tamper Pin activation.
    101          * Input          : - NewState: new state of the Tamper Pin activation.
    102          *                    This parameter can be: ENABLE or DISABLE.
    103          * Output         : None
    104          * Return         : None
    105          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          void BKP_TamperPinCmd(FunctionalState NewState)
    107          {
    108            /* Check the parameters */
    109            assert_param(IS_FUNCTIONAL_STATE(NewState));
    110          
    111            *(vu32 *) CR_TPE_BB = (u32)NewState;
   \                     BKP_TamperPinCmd: (+1)
   \   00000000   0x....             LDR      R1,??DataTable10_1  ;; 0x420d8600
   \   00000002   0x6008             STR      R0,[R1, #+0]
    112          }
   \   00000004   0x4770             BX       LR               ;; return
    113          
    114          /*******************************************************************************
    115          * Function Name  : BKP_ITConfig
    116          * Description    : Enables or disables the Tamper Pin Interrupt.
    117          * Input          : - NewState: new state of the Tamper Pin Interrupt.
    118          *                    This parameter can be: ENABLE or DISABLE.
    119          * Output         : None
    120          * Return         : None
    121          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    122          void BKP_ITConfig(FunctionalState NewState)
    123          {
    124            /* Check the parameters */
    125            assert_param(IS_FUNCTIONAL_STATE(NewState));
    126          
    127            *(vu32 *) CSR_TPIE_BB = (u32)NewState;
   \                     BKP_ITConfig: (+1)
   \   00000000   0x....             LDR      R1,??DataTable10_2  ;; 0x420d8688
   \   00000002   0x6008             STR      R0,[R1, #+0]
    128          }
   \   00000004   0x4770             BX       LR               ;; return
    129          
    130          /*******************************************************************************
    131          * Function Name  : BKP_RTCOutputConfig
    132          * Description    : Select the RTC output source to output on the Tamper pin.
    133          * Input          : - BKP_RTCOutputSource: specifies the RTC output source.
    134          *                    This parameter can be one of the following values:
    135          *                       - BKP_RTCOutputSource_None: no RTC output on the Tamper pin.
    136          *                       - BKP_RTCOutputSource_CalibClock: output the RTC clock
    137          *                         with frequency divided by 64 on the Tamper pin.
    138          *                       - BKP_RTCOutputSource_Alarm: output the RTC Alarm pulse 
    139          *                         signal on the Tamper pin.
    140          *                       - BKP_RTCOutputSource_Second: output the RTC Second pulse 
    141          *                         signal on the Tamper pin.  
    142          * Output         : None
    143          * Return         : None
    144          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    145          void BKP_RTCOutputConfig(u16 BKP_RTCOutputSource)
    146          {
    147            u16 tmpreg = 0;
    148          
    149            /* Check the parameters */
    150            assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
    151          
    152            tmpreg = BKP->RTCCR;
   \                     BKP_RTCOutputConfig: (+1)
   \   00000000   0x....             LDR      R1,??DataTable10_3  ;; 0x40006c2c
   \   00000002   0x880A             LDRH     R2,[R1, #+0]
    153          
    154            /* Clear CCO, ASOE and ASOS bits */
    155            tmpreg &= RTCCR_Mask;
    156            
    157            /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
    158            tmpreg |= BKP_RTCOutputSource;
    159          
    160            /* Store the new value */
    161            BKP->RTCCR = tmpreg;
   \   00000004   0x....             LDR      R3,??DataTable10_4  ;; 0xfc7f
   \   00000006   0x4013             ANDS     R3,R3,R2
   \   00000008   0x4318             ORRS     R0,R0,R3
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    162          }
   \   0000000C   0x4770             BX       LR               ;; return
    163          
    164          /*******************************************************************************
    165          * Function Name  : BKP_SetRTCCalibrationValue
    166          * Description    : Sets RTC Clock Calibration value.
    167          * Input          : - CalibrationValue: specifies the RTC Clock Calibration value.
    168          *                    This parameter must be a number between 0 and 0x7F.
    169          * Output         : None
    170          * Return         : None
    171          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    172          void BKP_SetRTCCalibrationValue(u8 CalibrationValue)
    173          {
    174            u16 tmpreg = 0;
    175          
    176            /* Check the parameters */
    177            assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
    178          
    179            tmpreg = BKP->RTCCR;
   \                     BKP_SetRTCCalibrationValue: (+1)
   \   00000000   0x....             LDR      R1,??DataTable10_3  ;; 0x40006c2c
   \   00000002   0x880A             LDRH     R2,[R1, #+0]
    180          
    181            /* Clear CAL[6:0] bits */
    182            tmpreg &= RTCCR_CAL_Mask;
    183          
    184            /* Set CAL[6:0] bits according to CalibrationValue value */
    185            tmpreg |= CalibrationValue;
    186          
    187            /* Store the new value */
    188            BKP->RTCCR = tmpreg;
   \   00000004   0x....             LDR      R3,??DataTable10_5  ;; 0xff80
   \   00000006   0x4013             ANDS     R3,R3,R2
   \   00000008   0x4303             ORRS     R3,R3,R0
   \   0000000A   0x800B             STRH     R3,[R1, #+0]
    189          }
   \   0000000C   0x4770             BX       LR               ;; return
    190          
    191          /*******************************************************************************
    192          * Function Name  : BKP_WriteBackupRegister
    193          * Description    : Writes user data to the specified Data Backup Register.
    194          * Input          : - BKP_DR: specifies the Data Backup Register.
    195          *                    This parameter can be BKP_DRx where x:[1, 42]
    196          *                  - Data: data to write
    197          * Output         : None
    198          * Return         : None
    199          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    200          void BKP_WriteBackupRegister(u16 BKP_DR, u16 Data)
    201          {
    202            /* Check the parameters */
    203            assert_param(IS_BKP_DR(BKP_DR));
    204          
    205            *(vu16 *) (BKP_BASE + BKP_DR) = Data;
   \                     BKP_WriteBackupRegister: (+1)
   \   00000000   0x....             LDR      R2,??DataTable10_6  ;; 0x40006c00
   \   00000002   0x1880             ADDS     R0,R0,R2
   \   00000004   0x8001             STRH     R1,[R0, #+0]
    206          }
   \   00000006   0x4770             BX       LR               ;; return
    207          
    208          /*******************************************************************************
    209          * Function Name  : BKP_ReadBackupRegister
    210          * Description    : Reads data from the specified Data Backup Register.
    211          * Input          : - BKP_DR: specifies the Data Backup Register.
    212          *                    This parameter can be BKP_DRx where x:[1, 42]
    213          * Output         : None
    214          * Return         : The content of the specified Data Backup Register
    215          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    216          u16 BKP_ReadBackupRegister(u16 BKP_DR)
    217          {
    218            /* Check the parameters */
    219            assert_param(IS_BKP_DR(BKP_DR));
    220          
    221            return (*(vu16 *) (BKP_BASE + BKP_DR));
   \                     BKP_ReadBackupRegister: (+1)
   \   00000000   0x....             LDR      R1,??DataTable10_6  ;; 0x40006c00
   \   00000002   0x1840             ADDS     R0,R0,R1
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    222          }
    223          
    224          /*******************************************************************************
    225          * Function Name  : BKP_GetFlagStatus
    226          * Description    : Checks whether the Tamper Pin Event flag is set or not.
    227          * Input          : None
    228          * Output         : None
    229          * Return         : The new state of the Tamper Pin Event flag (SET or RESET).
    230          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    231          FlagStatus BKP_GetFlagStatus(void)
    232          {
    233            return (FlagStatus)(*(vu32 *) CSR_TEF_BB);
   \                     BKP_GetFlagStatus: (+1)
   \   00000000   0x....             LDR      R0,??DataTable10_7  ;; 0x420d86a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0600             LSLS     R0,R0,#+24
   \   00000006   0x0E00             LSRS     R0,R0,#+24
   \   00000008   0x4770             BX       LR               ;; return
    234          }
    235          
    236          /*******************************************************************************
    237          * Function Name  : BKP_ClearFlag
    238          * Description    : Clears Tamper Pin Event pending flag.
    239          * Input          : None
    240          * Output         : None
    241          * Return         : None
    242          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    243          void BKP_ClearFlag(void)
    244          {
    245            /* Set CTE bit to clear Tamper Pin Event flag */
    246            BKP->CSR |= CSR_CTE_Set;
   \                     BKP_ClearFlag: (+1)
   \   00000000   0x....             LDR      R0,??DataTable10_8  ;; 0x40006c34
   \   00000002   0x8801             LDRH     R1,[R0, #+0]
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x430A             ORRS     R2,R2,R1
   \   00000008   0x8002             STRH     R2,[R0, #+0]
    247          }
   \   0000000A   0x4770             BX       LR               ;; return
    248          
    249          /*******************************************************************************
    250          * Function Name  : BKP_GetITStatus
    251          * Description    : Checks whether the Tamper Pin Interrupt has occurred or not.
    252          * Input          : None
    253          * Output         : None
    254          * Return         : The new state of the Tamper Pin Interrupt (SET or RESET).
    255          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    256          ITStatus BKP_GetITStatus(void)
    257          {
    258            return (ITStatus)(*(vu32 *) CSR_TIF_BB);
   \                     BKP_GetITStatus: (+1)
   \   00000000   0x....             LDR      R0,??DataTable10_9  ;; 0x420d86a4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0600             LSLS     R0,R0,#+24
   \   00000006   0x0E00             LSRS     R0,R0,#+24
   \   00000008   0x4770             BX       LR               ;; return
    259          }
    260          
    261          /*******************************************************************************
    262          * Function Name  : BKP_ClearITPendingBit
    263          * Description    : Clears Tamper Pin Interrupt pending bit.
    264          * Input          : None
    265          * Output         : None
    266          * Return         : None
    267          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    268          void BKP_ClearITPendingBit(void)
    269          {
    270            /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
    271            BKP->CSR |= CSR_CTI_Set;
   \                     BKP_ClearITPendingBit: (+1)
   \   00000000   0x....             LDR      R0,??DataTable10_8  ;; 0x40006c34
   \   00000002   0x8801             LDRH     R1,[R0, #+0]
   \   00000004   0x2202             MOVS     R2,#+2
   \   00000006   0x430A             ORRS     R2,R2,R1
   \   00000008   0x8002             STRH     R2,[R0, #+0]
    272          }
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x420D8604         DC32     0x420d8604

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x420D8600         DC32     0x420d8600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x420D8688         DC32     0x420d8688

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x40006C2C         DC32     0x40006c2c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x0000FC7F         DC32     0xfc7f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x0000FF80         DC32     0xff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x40006C00         DC32     0x40006c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x420D86A0         DC32     0x420d86a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x40006C34         DC32     0x40006c34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x420D86A4         DC32     0x420d86a4
    273          
    274          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BKP_ClearFlag
       0   BKP_ClearITPendingBit
       8   BKP_DeInit
         8   -> RCC_BackupResetCmd
       0   BKP_GetFlagStatus
       0   BKP_GetITStatus
       0   BKP_ITConfig
       0   BKP_RTCOutputConfig
       0   BKP_ReadBackupRegister
       0   BKP_SetRTCCalibrationValue
       0   BKP_TamperPinCmd
       0   BKP_TamperPinLevelConfig
       0   BKP_WriteBackupRegister


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      12  BKP_ClearFlag
      12  BKP_ClearITPendingBit
      18  BKP_DeInit
      10  BKP_GetFlagStatus
      10  BKP_GetITStatus
       6  BKP_ITConfig
      14  BKP_RTCOutputConfig
       8  BKP_ReadBackupRegister
      14  BKP_SetRTCCalibrationValue
       6  BKP_TamperPinCmd
       6  BKP_TamperPinLevelConfig
       8  BKP_WriteBackupRegister

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
