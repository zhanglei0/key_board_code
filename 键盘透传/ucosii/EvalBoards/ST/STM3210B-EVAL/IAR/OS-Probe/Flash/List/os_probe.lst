###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       04/Jun/2018  23:13:25
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\uC-Probe\Target\Plugins\uCOS-II\os_probe.c
#    Command line =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\uC-Probe\Target\Plugins\uCOS-II\os_probe.c
#        -lCN
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=ARM7TDMI -e --fpu=None --dlib_config "C:\Program
#        Files\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        --cpu_mode thumb -Om --use_c++_inline
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\os_probe.lst
#    Object file  =  
#        C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\os_probe.o
#
###############################################################################

C:\Users\zl\Desktop\¼üÅÌÍ¸´«\ucosii\uC-Probe\Target\Plugins\uCOS-II\os_probe.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     uC/Probe uC/OS-II Plug-in
      4          *
      5          *                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                              uC/Probe
     18          *
     19          *                                         Plug-in for uC/OS-II
     20          *
     21          * Filename      : os_probe.c
     22          * Version       : V2.00
     23          * Programmer(s) : BAN
     24          *********************************************************************************************************
     25          */
     26          
     27          /*
     28          *********************************************************************************************************
     29          *                                              INCLUDE FILES
     30          *********************************************************************************************************
     31          */
     32          
     33          #define  OS_PROBE_MODULE
     34          #include <os_probe.h>

   \                                 In section .bss, align 4
   \   __absolute INT16U OSProbe_Delay
   \                     OSProbe_Delay:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   __absolute void (*OSProbe_CallbackFnct)(void)
   \                     OSProbe_CallbackFnct:
   \   00000004                      DS8 4
     35          
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                             LOCAL CONSTANTS
     40          *********************************************************************************************************
     41          */
     42          
     43          
     44          /*
     45          *********************************************************************************************************
     46          *                                            LOCAL DATA TYPES
     47          *********************************************************************************************************
     48          */
     49          
     50          
     51          /*
     52          *********************************************************************************************************
     53          *                                              LOCAL TABLES
     54          *********************************************************************************************************
     55          */
     56          
     57          
     58          /*
     59          *********************************************************************************************************
     60          *                                         LOCAL GLOBAL VARIABLES
     61          *********************************************************************************************************
     62          */
     63          
     64          #if (OS_PROBE_TASK > 0)
     65          static  OS_STK  OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE];
     66          #endif
     67          
     68          
     69          /*
     70          *********************************************************************************************************
     71          *                                        LOCAL FUNCTION PROTOTYPES
     72          *********************************************************************************************************
     73          */
     74          
     75          #if (OS_PROBE_TASK > 0)
     76          static  void  OSProbe_InitOS(void);
     77          static  void  OSProbe_Task  (void  *p_arg);
     78          #endif
     79          
     80          
     81          /*
     82          *********************************************************************************************************
     83          *                                       LOCAL CONFIGURATION ERRORS
     84          *********************************************************************************************************
     85          */
     86          
     87          
     88          /*
     89          *********************************************************************************************************
     90          *                                             OSProbe_Init()
     91          *
     92          * Description : Initialize the Probe Plug-In for uC/OS-II.
     93          *
     94          * Argument(s) : none.
     95          *
     96          * Return(s)   : none.
     97          *
     98          * Caller(s)   : Application.
     99          *
    100          * Note(s)     : none.
    101          *********************************************************************************************************
    102          */
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void  OSProbe_Init (void)
    105          {
   \                     OSProbe_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    106          #if (OS_PROBE_TASK > 0)
    107              OSProbe_SetDelay(100);
   \   00000002   0x2064             MOVS     R0,#+100
   \   00000004   0x.... 0x....      BL       OSProbe_SetDelay
    108              OSProbe_SetCallback((void (*)(void))0);                     /* Force terminal callback function to 'nothing'.       */
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       OSProbe_SetCallback
    109          
    110              OSProbe_InitOS();
   \   0000000E   0x.... 0x....      BL       OSProbe_InitOS
    111          #endif
    112          
    113          #if (OS_PROBE_HOOKS_EN > 0)
    114              OSProbe_TmrInit();
   \   00000012   0x.... 0x....      BL       OSProbe_TmrInit
    115          
    116              OSProbe_CyclesCtr   = 0;
   \   00000016   0x....             LDR      R0,??DataTable7
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6041             STR      R1,[R0, #+4]
    117              OSProbe_TmrCntsPrev = 0;
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    118          #endif
    119          }
   \   0000001E   0xBC09             POP      {R0,R3}
   \   00000020   0x4718             BX       R3               ;; return
    120          
    121          /*
    122          *********************************************************************************************************
    123          *                                          OSProbe_SetCallback()
    124          *
    125          * Description : Set the callback function which will be invoked in OSProbe_Task().
    126          *
    127          * Argument(s) : call_back   Pointer to the callback function.
    128          *
    129          * Return(s)   : none.
    130          *
    131          * Caller(s)   : Application.
    132          *
    133          * Note(s)     : none.
    134          *********************************************************************************************************
    135          */
    136          
    137          #if (OS_PROBE_TASK > 0)

   \                                 In section .text, align 2, keep-with-next
    138          void  OSProbe_SetCallback (void (*call_back)(void))
    139          {
    140              OSProbe_CallbackFnct = call_back;
   \                     OSProbe_SetCallback: (+1)
   \   00000000   0x....             LDR      R1,??DataTable7_1
   \   00000002   0x6048             STR      R0,[R1, #+4]
    141          }
   \   00000004   0x4770             BX       LR               ;; return
    142          #endif
    143          
    144          
    145          /*
    146          *********************************************************************************************************
    147          *                                           OSProbe_SetDelay()
    148          *
    149          * Description : Set the delay used in OSProbe_Task().
    150          *
    151          * Argument(s) : delay       Delay, in milliseconds.
    152          *
    153          * Return(s)   : none.
    154          *
    155          * Caller(s)   : Application.
    156          *
    157          * Note(s)     : none.
    158          *********************************************************************************************************
    159          */
    160          
    161          #if (OS_PROBE_TASK > 0)

   \                                 In section .text, align 2, keep-with-next
    162          void  OSProbe_SetDelay (INT16U  delay)
    163          {
    164              OSProbe_Delay = delay;
   \                     OSProbe_SetDelay: (+1)
   \   00000000   0x....             LDR      R1,??DataTable7_1
   \   00000002   0x8008             STRH     R0,[R1, #+0]
    165          }
   \   00000004   0x4770             BX       LR               ;; return
    166          #endif
    167          
    168          
    169          /*
    170          *********************************************************************************************************
    171          *                                         OSProbe_TimeGetCycles()
    172          *
    173          * Description : Get time as accurately as possible, stored in a 32-bit variable.
    174          *
    175          * Argument(s) : none.
    176          *
    177          * Return(s)   : A 32-bit representation of time.
    178          *
    179          * Caller(s)   : OSProbe_TaskSwHook(),
    180          *               OSProbe_TaskCreateHook().
    181          *
    182          * Note(s)     : (1) Since the cycles count returned by this function will eventually overflow a 32-bit
    183          *                   integer, it should only be used for comparative time lapse measurements (e.g., to
    184          *                   determine a time lapse between two events which can be compared to similarly
    185          *                   calculated time lapses).  In such a measurement, the difference between two cycle
    186          *                   counts will be computed.  The application MUST guarantee that this difference does
    187          *                   not overflow a 32-bit integer.  For example, if the underlying timer increments at a
    188          *                   rate of 100MHz, then the maximum time lapse that can be measured is
    189          *
    190          *                                2^32 - 1
    191          *                       tmax = ------------ s = 42.9497 s
    192          *                               100 * 10^6
    193          *
    194          *               (2) When using a 16-bit timer, this function MUST be called with sufficient frequency
    195          *                   that timer overflows do not occur.  If necessary, the timer should be configured with
    196          *                   a sufficient prescaler in order to decrease the probability of timer overflows.
    197          *
    198          *                   For example, a 16-bit timer incrementing at 48-MHz with a prescaler of 128 will
    199          *                   require that this function be called at
    200          *
    201          *                                   48 * 10^6
    202          *                       freqmin = ------------- Hz = 5.72 Hz
    203          *                                  128 * 65536
    204          *
    205          *                   A possible solution is that this would be called from the tick handler of the
    206          *                   application's OS (assuming the tick rate is greater than 5.72 Hz).
    207          *********************************************************************************************************
    208          */
    209          
    210          #if (OS_PROBE_HOOKS_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    211          INT32U  OSProbe_TimeGetCycles (void)
    212          {
   \                     OSProbe_TimeGetCycles: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    213              INT32U     cycles;
    214          #if (OS_PROBE_TMR_32_BITS > 0)
    215              INT32U     cnts32;
    216              INT32U     cnts32_delta;
    217          #else
    218              INT16U     cnts16;
    219              INT16U     cnts16_delta;
    220          #endif
    221          #if (OS_CRITICAL_METHOD == 3)                                   /* Allocate storage for CPU status register.            */
    222              OS_CPU_SR  cpu_sr = 0;
    223          #endif
    224          
    225          
    226              OS_ENTER_CRITICAL();
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000006   0x0004             MOVS     R4,R0
    227          #if (OS_PROBE_TMR_32_BITS > 0)
    228              cnts32               = OSProbe_TmrRd();                     /* Read current counts of the free running counter.     */
    229              cnts32_delta         = cnts32 - OSProbe_TmrCntsPrev;
    230              OSProbe_TmrCntsPrev  = cnts32;                              /* Save current counts for next time.                   */
    231              OSProbe_CyclesCtr   += cnts32_delta;
    232          #else
    233              cnts16               = (INT16U)OSProbe_TmrRd();             /* Read current counts of the free running counter.     */
   \   00000008   0x.... 0x....      BL       OSProbe_TmrRd
    234              cnts16_delta         = cnts16 - OSProbe_TmrCntsPrev;
   \   0000000C   0x....             LDR      R1,??DataTable7
   \   0000000E   0x880A             LDRH     R2,[R1, #+0]
   \   00000010   0x1A82             SUBS     R2,R0,R2
    235              OSProbe_TmrCntsPrev  = cnts16;                              /* Save current counts for next time.                   */
   \   00000012   0x8008             STRH     R0,[R1, #+0]
    236              OSProbe_CyclesCtr   += (INT32U)cnts16_delta;
   \   00000014   0x6848             LDR      R0,[R1, #+4]
   \   00000016   0x0412             LSLS     R2,R2,#+16
   \   00000018   0x0C12             LSRS     R2,R2,#+16
   \   0000001A   0x1885             ADDS     R5,R0,R2
   \   0000001C   0x604D             STR      R5,[R1, #+4]
    237          #endif
    238              cycles               = OSProbe_CyclesCtr;
    239              OS_EXIT_CRITICAL();
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       OS_CPU_SR_Restore
    240          
    241              return (cycles);
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0xBC32             POP      {R1,R4,R5}
   \   00000028   0xBC08             POP      {R3}
   \   0000002A   0x4718             BX       R3               ;; return
    242          }
    243          #endif
    244          
    245          
    246          /*
    247          *********************************************************************************************************
    248          *********************************************************************************************************
    249          *                                               TASK HOOKS
    250          *********************************************************************************************************
    251          *********************************************************************************************************
    252          */
    253          
    254          /*
    255          *********************************************************************************************************
    256          *                                        OSProbe_TaskCreateHook()
    257          *
    258          * Description : This function is called when a task is created.
    259          *
    260          * Argument(s) : ptcb        Pointer to the task control block of the task being created.
    261          *
    262          * Return(s)   : none.
    263          *
    264          * Caller(s)   : App_TaskCreateHook().
    265          *
    266          * Note(s)     : (1) Interrupts are disabled during this call.
    267          *
    268          *               (2) This MUST be called from applications's task create hook function App_TaskCreateHook().
    269          *********************************************************************************************************
    270          */
    271          
    272          #if (OS_PROBE_HOOKS_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    273          void  OSProbe_TaskCreateHook (OS_TCB *ptcb)
    274          {
   \                     OSProbe_TaskCreateHook: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    275              ptcb->OSTCBCyclesStart = OSProbe_TimeGetCycles();           /* Get the current start time for this task.            */
   \   00000004   0x.... 0x....      BL       OSProbe_TimeGetCycles
   \   00000008   0x6420             STR      R0,[R4, #+64]
    276              ptcb->OSTCBCyclesTot   = 0;                                 /* Update the task's total execution time.              */
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x63E0             STR      R0,[R4, #+60]
    277          }
   \   0000000E   0xBC10             POP      {R4}
   \   00000010   0xBC08             POP      {R3}
   \   00000012   0x4718             BX       R3               ;; return
    278          #endif
    279          
    280          
    281          /*
    282          *********************************************************************************************************
    283          *                                          OSProbe_TaskSwHook()
    284          *
    285          * Description : This function is called when a task switch is performed.
    286          *
    287          * Argument(s) : none.
    288          *
    289          * Return(s)   : none.
    290          *
    291          * Caller(s)   : App_TaskSwHook().
    292          *
    293          * Note(s)     : (1) Interrupts are disabled during this call.
    294          *
    295          *               (2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    296          *                   will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    297          *                   task being switched out (i.e. the preempted task).
    298          *
    299          *               (3) This MUST be called from application's task switch hook function App_TaskSwHook().
    300          *********************************************************************************************************
    301          */
    302          
    303          #if (OS_PROBE_HOOKS_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    304          void  OSProbe_TaskSwHook (void)
    305          {
   \                     OSProbe_TaskSwHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    306              INT32U  cycles;
    307          
    308          
    309              cycles                         = OSProbe_TimeGetCycles();   /* This task is done.                                   */
   \   00000002   0x.... 0x....      BL       OSProbe_TimeGetCycles
    310              OSTCBCur->OSTCBCyclesTot      += cycles - OSTCBCur->OSTCBCyclesStart;
   \   00000006   0x....             LDR      R1,??DataTable7_2
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x6BCA             LDR      R2,[R1, #+60]
   \   0000000C   0x1812             ADDS     R2,R2,R0
   \   0000000E   0x6C0B             LDR      R3,[R1, #+64]
   \   00000010   0x1AD2             SUBS     R2,R2,R3
   \   00000012   0x63CA             STR      R2,[R1, #+60]
    311              OSTCBHighRdy->OSTCBCyclesStart = cycles;                    /* Save absolute #cycles at task activation.            */
   \   00000014   0x....             LDR      R1,??DataTable7_3
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x6408             STR      R0,[R1, #+64]
    312          }
   \   0000001A   0xBC09             POP      {R0,R3}
   \   0000001C   0x4718             BX       R3               ;; return
    313          #endif
    314          
    315          
    316          /*
    317          *********************************************************************************************************
    318          *                                           OSProbe_TickHook()
    319          *
    320          * Description : This function is called every tick.
    321          *
    322          * Argument(s) : none.
    323          *
    324          * Return(s)   : none.
    325          *
    326          * Caller(s)   : App_TimeTickHook().
    327          *
    328          * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    329          *
    330          *               (2) This MUST be called from user's time tick hook function App_TimeTickHook().
    331          *********************************************************************************************************
    332          */
    333          
    334          #if (OS_PROBE_HOOKS_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    335          void  OSProbe_TickHook (void)
    336          {
   \                     OSProbe_TickHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    337              (void)OSProbe_TimeGetCycles();
   \   00000002   0x.... 0x....      BL       OSProbe_TimeGetCycles
    338          }
   \   00000006   0xBC09             POP      {R0,R3}
   \   00000008   0x4718             BX       R3               ;; return
    339          #endif
    340          
    341          
    342          /*
    343          *********************************************************************************************************
    344          *********************************************************************************************************
    345          *                                             LOCAL FUNCTIONS
    346          *********************************************************************************************************
    347          *********************************************************************************************************
    348          */
    349          
    350          
    351          /*
    352          *********************************************************************************************************
    353          *                                            OSProbe_InitOS()
    354          *
    355          * Description : Create the task for the Probe Plug-In for uC/OS-II.
    356          *
    357          * Argument(s) : none.
    358          *
    359          * Return(s)   : none.
    360          *
    361          * Caller(s)   : OSProbe_Init().
    362          *
    363          * Note(s)     : none.
    364          *********************************************************************************************************
    365          */
    366          
    367          #if (OS_PROBE_TASK > 0)

   \                                 In section .text, align 2, keep-with-next
    368          static  void  OSProbe_InitOS (void)
    369          {
   \                     OSProbe_InitOS: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    370              INT8U  err;
    371          
    372          
    373          #if (OS_TASK_CREATE_EXT_EN > 0)
    374              #if (OS_STK_GROWTH == 1)
    375              err = OSTaskCreateExt((void (*)(void *)) OSProbe_Task,
    376                                    (void          * ) 0,
    377                                    (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
    378                                    (INT8U           ) OS_PROBE_TASK_PRIO,
    379                                    (INT16U          ) OS_PROBE_TASK_PRIO,
    380                                    (OS_STK        * )&OSProbe_TaskStk[0],
    381                                    (INT32U          ) OS_PROBE_TASK_STK_SIZE,
    382                                    (void          * ) 0,
    383                                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   \   00000004   0x....             LDR      R0,??DataTable7_4
   \   00000006   0x2103             MOVS     R1,#+3
   \   00000008   0x9104             STR      R1,[SP, #+16]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x9103             STR      R1,[SP, #+12]
   \   0000000E   0x2180             MOVS     R1,#+128
   \   00000010   0x9102             STR      R1,[SP, #+8]
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x9100             STR      R1,[SP, #+0]
   \   00000018   0x000B             MOVS     R3,R1
   \   0000001A   0x21FE             MOVS     R1,#+254
   \   0000001C   0x0049             LSLS     R1,R1,#+1        ;; #+508
   \   0000001E   0x1842             ADDS     R2,R0,R1
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x....             LDR      R0,??DataTable7_5
   \   00000024   0x.... 0x....      BL       OSTaskCreateExt
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x7508             STRB     R0,[R1, #+20]
    384              #else
    385              err = OSTaskCreateExt((void (*)(void *)) OSProbe_Task,
    386                                    (void          * ) 0,
    387                                    (OS_STK        * )&OSProbe_TaskStk[0],
    388                                    (INT8U           ) OS_PROBE_TASK_PRIO,
    389                                    (INT16U          ) OS_PROBE_TASK_PRIO,
    390                                    (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
    391                                    (INT32U          ) OS_PROBE_TASK_STK_SIZE,
    392                                    (void          * ) 0,
    393                                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
    394              #endif
    395          #else
    396              #if (OS_STK_GROWTH == 1)
    397              err = OSTaskCreate((void (*)(void *)) OSProbe_Task,
    398                                 (void          * ) 0,
    399                                 (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
    400                                 (INT8U           ) OS_PROBE_TASK_PRIO);
    401              #else
    402              err = OSTaskCreate((void (*)(void *)) OSProbe_Task,
    403                                 (void          * ) 0,
    404                                 (OS_STK        * )&OSProbe_TaskStk[0],
    405                                 (INT8U           ) OS_PROBE_TASK_PRIO);
    406              #endif
    407          #endif
    408          
    409          #if (OS_TASK_NAME_SIZE > 15)
    410              OSTaskNameSet(OS_PROBE_TASK_PRIO, (INT8U *)"Probe OS PlugIn", &err);
   \   0000002C   0xAA05             ADD      R2,SP,#+20
   \   0000002E   0x....             LDR      R1,??DataTable7_6
   \   00000030   0x201C             MOVS     R0,#+28
   \   00000032   0x.... 0x....      BL       OSTaskNameSet
    411          #endif
    412          
    413              (void)&err;
    414          }
   \   00000036   0xB007             ADD      SP,SP,#+28
   \   00000038   0xBC08             POP      {R3}
   \   0000003A   0x4718             BX       R3               ;; return
    415          #endif
    416          
    417          
    418          /*
    419          *********************************************************************************************************
    420          *                                             OSProbe_Task()
    421          *
    422          * Description : Updates task CPU usage and task stack usage statistics and calls a user-specified
    423          *               callback functions, if the user sets this function.
    424          *
    425          * Argument(s) : p_arg       Argument passed to OSProbe_Task() by 'OSTaskCreate()'.
    426          *
    427          * Return(s)   : none.
    428          *
    429          * Caller(s)   : This is a task.
    430          *
    431          * Note(s)     : none.
    432          *********************************************************************************************************
    433          */
    434          
    435          #if (OS_PROBE_TASK > 0)

   \                                 In section .text, align 2, keep-with-next
    436          static  void  OSProbe_Task (void *p_arg)
    437          {
   \                     OSProbe_Task: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x22F0             MOVS     R2,#+240
   \   00000008   0xE007             B        ??OSProbe_Task_0
    438                      OS_TCB  *ptcb;
    439                      INT16U   i;
    440                      INT32U   cycles_tot;
    441              static  INT32U   cycles_dif[OS_MAX_TASKS];
    442              static  INT32U   cycles_tot_last[OS_MAX_TASKS];
    443          #if (OS_PROBE_USE_FP == 0)
    444                      INT32U   max;
    445          #endif
    446          
    447          
    448              (void)p_arg;
    449          
    450                                                                          /* Initialize stored CyclesTot values.                  */
    451              for (i = 0; i < OS_MAX_TASKS; i++) {
    452                  cycles_tot_last[i]      = 0;
   \                     ??OSProbe_Task_1: (+1)
   \   0000000A   0x....             LDR      R0,??DataTable7_7
   \   0000000C   0x00A1             LSLS     R1,R4,#+2
   \   0000000E   0x1840             ADDS     R0,R0,R1
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x5081             STR      R1,[R0, R2]
    453                  OSProbe_TaskStkUsage[i] = 0;
   \   00000014   0x6501             STR      R1,[R0, #+80]
    454                  OSProbe_TaskCPUUsage[i] = 0;
   \   00000016   0x6001             STR      R1,[R0, #+0]
    455              }
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??OSProbe_Task_0: (+1)
   \   0000001A   0x2C14             CMP      R4,#+20
   \   0000001C   0xDBF5             BLT      ??OSProbe_Task_1
    456          
    457              while (1) {
    458                  OSTimeDlyHMSM(0, 0, 0, OSProbe_Delay);
   \                     ??OSProbe_Task_2: (+1)
   \   0000001E   0x....             LDR      R4,??DataTable7_1
   \   00000020   0x8823             LDRH     R3,[R4, #+0]
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x0011             MOVS     R1,R2
   \   00000026   0x0008             MOVS     R0,R1
   \   00000028   0x.... 0x....      BL       OSTimeDlyHMSM
    459                  if (OSProbe_CallbackFnct != (void (*)(void))0) {
   \   0000002C   0x6860             LDR      R0,[R4, #+4]
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0xD001             BEQ      ??OSProbe_Task_3
    460                      OSProbe_CallbackFnct();
   \   00000032   0x.... 0x....      BL       ??__iar_via_R0_0
    461                  }
    462          
    463                                                                          /* Update task CPU usage                                */
    464                  i          = 0;
   \                     ??OSProbe_Task_3: (+1)
   \   00000036   0x2400             MOVS     R4,#+0
    465                  cycles_tot = 0;
   \   00000038   0x0025             MOVS     R5,R4
    466                  ptcb       = &OSTCBTbl[0];                              /*  ... Get pointer to first TCB ...                    */
   \   0000003A   0x....             LDR      R6,??DataTable7_8
   \   0000003C   0xE014             B        ??OSProbe_Task_4
    467          
    468                  while ((i    < OS_MAX_TASKS) &&
    469                         (ptcb != (OS_TCB *)0) &&
    470                         (ptcb != (OS_TCB *)1)) {
    471                                                                          /*  ... Calculate new CyclesDif, the number of cycles   */
    472                                                                          /*  ... used by the task since the last reading.  Half  */
    473                                                                          /*  ... the previous value is added to provide some     */
    474                                                                          /*  ... hysteresis, thereby reducing the natural        */
    475                                                                          /*  ... "jitter" in the data.                           */
    476                      cycles_dif[i]       = (ptcb->OSTCBCyclesTot - cycles_tot_last[i]) / 2 + (cycles_dif[i] / 2);
    477                      cycles_tot_last[i]  = ptcb->OSTCBCyclesTot;
    478                      cycles_tot         += cycles_dif[i];
    479          
    480                      if (ptcb->OSTCBStkSize == 0) {
    481                          OSProbe_TaskStkUsage[i] = 0;
    482                      } else {
    483          #if (OS_PROBE_USE_FP > 0)
    484          #if (OS_STK_GROWTH == 1)
    485                          OSProbe_TaskStkUsage[i] = (FP32)(((INT32U)(ptcb->OSTCBStkBase) - (INT32U)(ptcb->OSTCBStkPtr))  * 100)
    486                                                  / ((ptcb->OSTCBStkSize) * sizeof (OS_STK));
   \                     ??OSProbe_Task_5: (+1)
   \   0000003E   0x6C70             LDR      R0,[R6, #+68]
   \   00000040   0x6831             LDR      R1,[R6, #+0]
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0x2164             MOVS     R1,#+100
   \   00000046   0x4348             MULS     R0,R1,R0
   \   00000048   0x.... 0x....      BL       __aeabi_ui2f
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x9801             LDR      R0,[SP, #+4]
   \   00000050   0x0080             LSLS     R0,R0,#+2
   \   00000052   0x.... 0x....      BL       __aeabi_ui2f
   \   00000056   0x0001             MOVS     R1,R0
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000005E   0x6538             STR      R0,[R7, #+80]
    487          #else
    488                          OSProbe_TaskStkUsage[i] = (FP32)(((INT32U)(ptcb->OSTCBStkPtr)  - (INT32U)(ptcb->OSTCBStkBase)) * 100)
    489                                                  / ((ptcb->OSTCBStkSize) * sizeof (OS_STK));
    490          #endif
    491          #else
    492                          max = ((ptcb->OSTCBStkSize) * sizeof (OS_STK)) / 100L;
    493          
    494          #if (OS_STK_GROWTH == 1)
    495                          OSProbe_TaskStkUsage[i] = (INT16U)(((INT32U)(ptcb->OSTCBStkBase) - (INT32U)(ptcb->OSTCBStkPtr))  / max);
    496          #else
    497                          OSProbe_TaskStkUsage[i] = (INT16U)(((INT32U)(ptcb->OSTCBStkPtr)  - (INT32U)(ptcb->OSTCBStkBase)) / max);
    498          #endif
    499          #endif
    500                      }
    501          
    502                      ptcb = ptcb->OSTCBPrev;
   \                     ??OSProbe_Task_6: (+1)
   \   00000060   0x69B6             LDR      R6,[R6, #+24]
    503          
    504                      i++;
   \   00000062   0x1C64             ADDS     R4,R4,#+1
   \   00000064   0x0424             LSLS     R4,R4,#+16
   \   00000066   0x0C24             LSRS     R4,R4,#+16
   \                     ??OSProbe_Task_4: (+1)
   \   00000068   0x2C14             CMP      R4,#+20
   \   0000006A   0xDA1B             BGE      ??OSProbe_Task_7
   \   0000006C   0x2E00             CMP      R6,#+0
   \   0000006E   0xD019             BEQ      ??OSProbe_Task_7
   \   00000070   0x2E01             CMP      R6,#+1
   \   00000072   0xD017             BEQ      ??OSProbe_Task_7
   \   00000074   0x....             LDR      R0,??DataTable7_7
   \   00000076   0x00A1             LSLS     R1,R4,#+2
   \   00000078   0x1847             ADDS     R7,R0,R1
   \   0000007A   0x0038             MOVS     R0,R7
   \   0000007C   0x30F0             ADDS     R0,R0,#+240
   \   0000007E   0x6BF1             LDR      R1,[R6, #+60]
   \   00000080   0x6802             LDR      R2,[R0, #+0]
   \   00000082   0x1A8A             SUBS     R2,R1,R2
   \   00000084   0x0852             LSRS     R2,R2,#+1
   \   00000086   0x23A0             MOVS     R3,#+160
   \   00000088   0x58FB             LDR      R3,[R7, R3]
   \   0000008A   0x085B             LSRS     R3,R3,#+1
   \   0000008C   0x18D2             ADDS     R2,R2,R3
   \   0000008E   0x23A0             MOVS     R3,#+160
   \   00000090   0x50FA             STR      R2,[R7, R3]
   \   00000092   0x6001             STR      R1,[R0, #+0]
   \   00000094   0x18AD             ADDS     R5,R5,R2
   \   00000096   0x68F0             LDR      R0,[R6, #+12]
   \   00000098   0x9001             STR      R0,[SP, #+4]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD1CF             BNE      ??OSProbe_Task_5
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x6538             STR      R0,[R7, #+80]
   \   000000A2   0xE7DD             B        ??OSProbe_Task_6
    505                  }
    506          
    507          #if (OS_PROBE_USE_FP == 0)
    508                  max = cycles_tot / 100L;
    509          #endif
    510                                                                          /*  ... For each task, calculate percent CPU usage.     */
    511                  for (i = 0; i < OS_MAX_TASKS; i++) {
   \                     ??OSProbe_Task_7: (+1)
   \   000000A4   0x2400             MOVS     R4,#+0
   \                     ??OSProbe_Task_8: (+1)
   \   000000A6   0x2C14             CMP      R4,#+20
   \   000000A8   0xDAB9             BGE      ??OSProbe_Task_2
    512          #if (OS_PROBE_USE_FP > 0)
    513                      OSProbe_TaskCPUUsage[i] = (FP32)(cycles_dif[i] * 100) / cycles_tot;
   \   000000AA   0x....             LDR      R0,??DataTable7_7
   \   000000AC   0x00A1             LSLS     R1,R4,#+2
   \   000000AE   0x1846             ADDS     R6,R0,R1
   \   000000B0   0x20A0             MOVS     R0,#+160
   \   000000B2   0x5830             LDR      R0,[R6, R0]
   \   000000B4   0x2164             MOVS     R1,#+100
   \   000000B6   0x4348             MULS     R0,R1,R0
   \   000000B8   0x.... 0x....      BL       __aeabi_ui2f
   \   000000BC   0x0007             MOVS     R7,R0
   \   000000BE   0x0028             MOVS     R0,R5
   \   000000C0   0x.... 0x....      BL       __aeabi_ui2f
   \   000000C4   0x0001             MOVS     R1,R0
   \   000000C6   0x0038             MOVS     R0,R7
   \   000000C8   0x.... 0x....      BL       __aeabi_fdiv
   \   000000CC   0x6030             STR      R0,[R6, #+0]
    514          #else
    515                      OSProbe_TaskCPUUsage[i] = (INT16U)(cycles_dif[i] / max);
    516          #endif
    517                  }
   \   000000CE   0x1C64             ADDS     R4,R4,#+1
   \   000000D0   0xE7E9             B        ??OSProbe_Task_8
    518              }
    519          }

   \                                 In section .bss, align 4
   \   __absolute FP32 volatile OSProbe_TaskCPUUsage[20]
   \                     OSProbe_TaskCPUUsage:
   \   00000000                      DS8 80
   \   __absolute FP32 volatile OSProbe_TaskStkUsage[20]
   \                     OSProbe_TaskStkUsage:
   \   00000050                      DS8 80
   \   000000A0                      DS8 80
   \   000000F0                      DS8 80

   \                                 In section .bss, align 4
   \   __absolute INT16U OSProbe_TmrCntsPrev
   \                     OSProbe_TmrCntsPrev:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   __absolute INT32U OSProbe_CyclesCtr
   \                     OSProbe_CyclesCtr:
   \   00000004                      DS8 4

   \                                 In section .bss, align 4
   \                     OSProbe_TaskStk:
   \   00000000                      DS8 512

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     OSProbe_TmrCntsPrev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     OSProbe_Delay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     OSTCBCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     OSTCBHighRdy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     OSProbe_TaskStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     OSProbe_Task

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     OSProbe_TaskCPUUsage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     OSTCBTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Probe OS PlugIn"
   \              0x6F 0x62    
   \              0x65 0x20    
   \              0x4F 0x53    
   \              0x20 0x50    
   \              0x6C 0x75    
   \              0x67 0x49    
   \              0x6E 0x00    
    520          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   OSProbe_Init
         8   -> OSProbe_InitOS
         8   -> OSProbe_SetCallback
         8   -> OSProbe_SetDelay
         8   -> OSProbe_TmrInit
      32   OSProbe_InitOS
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet
       0   OSProbe_SetCallback
       0   OSProbe_SetDelay
      32   OSProbe_Task
        32   -- Indirect call
        32   -> OSTimeDlyHMSM
        32   -> __aeabi_fdiv
        32   -> __aeabi_ui2f
       8   OSProbe_TaskCreateHook
         8   -> OSProbe_TimeGetCycles
       8   OSProbe_TaskSwHook
         8   -> OSProbe_TimeGetCycles
       8   OSProbe_TickHook
         8   -> OSProbe_TimeGetCycles
      16   OSProbe_TimeGetCycles
        16   -> OSProbe_TmrRd
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
      16  ?_0
       8  OSProbe_Delay
          OSProbe_CallbackFnct
      34  OSProbe_Init
      60  OSProbe_InitOS
       6  OSProbe_SetCallback
       6  OSProbe_SetDelay
     210  OSProbe_Task
     320  OSProbe_TaskCPUUsage
          OSProbe_TaskStkUsage
          cycles_dif
          cycles_tot_last
      20  OSProbe_TaskCreateHook
     512  OSProbe_TaskStk
      30  OSProbe_TaskSwHook
      10  OSProbe_TickHook
      44  OSProbe_TimeGetCycles
       8  OSProbe_TmrCntsPrev
          OSProbe_CyclesCtr
       2  -- Other

 
 848 bytes in section .bss
 474 bytes in section .text
 
 474 bytes of CODE memory
 848 bytes of DATA memory

Errors: none
Warnings: none
